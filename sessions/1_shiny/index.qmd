---
title: "Dynamic data analysis with Shiny"
author: "David Granjon (cynkra GmbH)"
format: 
  revealjs:
    #code-annotations: select
    footer: "<img src=\"../../assets/images/cynkra.svg\" width=\"5%\"/>"
    css: [
      "../../assets/css/custom.scss"
    ]
    height: 900
    width: 1600
    code-link: true
    code-copy: true
    fontsize: 24pt
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    chalkboard: false
    transition: none
    background-transition: none
editor:
    render-on-save: true
---

```{r, setup}
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(tidyr)
library(palmerpenguins)
```

```{r example-app, echo=FALSE, eval=FALSE}
library(shiny)
library(bslib)
library(dplyr)
library(ggplot2)
library(ggExtra)

penguins_csv <- "https://raw.githubusercontent.com/jcheng5/simplepenguins.R/main/penguins.csv"

df <- readr::read_csv(penguins_csv)
# Find subset of columns that are suitable for scatter plot
df_num <- df |> select(where(is.numeric), -Year)

ui <- page_sidebar(
  sidebar = sidebar(
    varSelectInput("xvar", "X variable", df_num, selected = "Bill Length (mm)"),
    varSelectInput("yvar", "Y variable", df_num, selected = "Bill Depth (mm)"),
    checkboxGroupInput(
      "species",
      "Filter by species",
      choices = unique(df$Species),
      selected = unique(df$Species)
    ),
    hr(), # Add a horizontal rule
    checkboxInput("by_species", "Show species", TRUE),
    checkboxInput("show_margins", "Show marginal plots", TRUE),
    checkboxInput("smooth", "Add smoother"),
  ),
  plotOutput("scatter")
)

server <- function(input, output, session) {
  subsetted <- reactive({
    req(input$species)
    df |> filter(Species %in% input$species)
  })

  output$scatter <- renderPlot(
    {
      p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) +
        list(
          theme(legend.position = "bottom"),
          if (input$by_species) aes(color = Species),
          geom_point(),
          if (input$smooth) geom_smooth()
        )

      if (input$show_margins) {
        margin_type <- if (input$by_species) "density" else "histogram"
        p <- ggExtra::ggMarginal(
          p,
          type = margin_type,
          margins = "both",
          size = 8,
          groupColour = input$by_species,
          groupFill = input$by_species
        )
      }

      p
    },
    res = 100
  )
}

shinyApp(ui, server)
```

```{r mtcars-app, echo=FALSE, eval=FALSE}
library(shiny)
library(ggplot2)

reactlog::reactlog_enable()

ui <- fluidPage(
  reactlog::reactlog_module_ui(),
  div(
    style = "visibility: hidden",
    selectInput(
      "variable",
      "Variable:",
      colnames(mtcars),
      selected = c("qsec", "hp", "cyl"),
      multiple = TRUE
    ),
    tableOutput("data"),
    plotOutput("plot")
  )
)

server <- function(input, output, session) {
  reactlog::reactlog_module_server()

  res <- reactive({
    mtcars[, c("mpg", input$variable), drop = FALSE]
  })

  output$data <- renderTable(
    {
      head(res())
    },
    rownames = TRUE
  )

  output$plot <- renderPlot({
    ggplot(data = res()) +
      geom_point(mapping = aes(x = hp, y = qsec))
  })
}

shinyApp(ui, server)
```

```{r shinylive_url, echo = FALSE, results = 'asis'}
# extract the code from knitr code chunks by ID
shiny_demo_code <- paste0(
  c(
    knitr::knit_code$get("example-app")
  ),
  collapse = "\n"
)
```

```{r mtcars_url, echo = FALSE, results = 'asis'}
# extract the code from knitr code chunks by ID
mtcars_demo_code <- paste0(
  c(
    knitr::knit_code$get("mtcars-app")
  ),
  collapse = "\n"
)
```

## I get a pretty cool local R program ...

![](../../assets/images/1_shiny/sad.svg){width="50%" fig-align="center"}

... But nobody can use it.

## But wait ... web applications exist for a long time.

![](../../assets/images/1_shiny/hard.svg){fig-align="center"}

-   Sure, you just need to convert R to web languages (HTML, CSS, JS).

## Isn't there an easier way for R developers?

![](../../assets/images/1_shiny/surprise.svg){fig-align="center"}

## Welcome Shiny?

::::: columns
::: column
![](../../assets/images/1_shiny/shiny.svg){width="50%" fig-align="center"}
:::

::: column
-   Make web development **accessible** to R people.
-   Unleash programs **interactivity**.
-   **Point and click** data Science.
:::
:::::

## How does a Shiny app looks?

```{r shinylive_iframe_app, echo = FALSE, out.width = '150%', out.extra = 'style = "position: relative; z-index:1"', eval=TRUE}
knitr::include_url(
  roxy.shinylive::create_shinylive_url(shiny_demo_code, header = FALSE),
  height = "800px"
)
```

## Is the code complex?

```{r shinylive_iframe_editor, echo = FALSE, out.width = '150%', out.extra = 'style = "position: relative; z-index:1"', eval=TRUE}
knitr::include_url(
  roxy.shinylive::create_shinylive_url(shiny_demo_code, mode = "editor"),
  height = "800px"
)
```

## Anatomy of a Shiny app

![](../../assets/images/1_shiny/anatomy.png){fig-align="center"}

## UI: shiny is able to produce HTML from R!

```{r, eval=FALSE, echo=TRUE}
shiny::selectInput("select", "Select", colnames(mtcars))
```

<br/>

```{r}
cat(as.character(shiny::selectInput("select", "Select", colnames(mtcars))))
```

You don't need to write any HTML, CSS and JS (but you could ðŸ˜ˆ...)

## Initialize interactivity with inputs

![](../../assets/images/1_shiny/inputs.png){fig-align="center"} 

::: {.incremental}

-   UI: create elements with an **unique** `inputId`, `variable`.
-   Server: recover its value within `input[["variable"]]` or `input$variable`.
-   `input` is **read only**.

:::

## Render output elements

![](../../assets/images/1_shiny/outputs.png){fig-align="center"}

::: incremental
-   Use a suitable **renderer**: `renderTable`, `renderPlot`, ...
-   Assign unique **outputId**: `data`.
-   Recover output on the UI (IDs must match!): `tableOutput`, `plotOutput`, ...
-   `output` is **readonly**.
:::

## Intermediate results with reactive expressions

![](../../assets/images/1_shiny/reactive.png){fig-align="center"}

::: incremental
-   **Return** values.
-   Take **dependencies** on anything **reactive** inside (input, other reactives).
-   Evaluate with `()`.
-   No side effects! (write.csv, ...).
-   **Lazy** and **cached**: don't run if not used, only recompute when needed.
:::

## Overview of the reactive graph

![](../../assets/images/1_shiny/reactive-graph.png){fig-align="center"}

## Reactive graph example

```{r shinylive_iframe_mtcars, echo = FALSE, out.width = '150%', out.extra = 'style = "position: relative; z-index:1"', eval=TRUE}
knitr::include_url(
  roxy.shinylive::create_shinylive_url(mtcars_demo_code, header = FALSE),
  height = "800px"
)
```

::: notes
Speaker notes go here.
:::

## Your turn

![](../../assets/images/1_shiny/practice.svg){width="50%" fig-align="center"}

## Exercise 1: adjustement of logistic model (1/2)

We consider the __logistic model__ (Verhulst) used to describe __population growth__.

$$
\frac{dN}{dt} = rN \left( 1 - \frac{N}{K} \right).
$$
whose solution is given by:

$$
N(t) = \frac{K}{1 + \left(\frac{K - N_0}{N_0}\right) e^{-rt}}.
$$
Where:

- `N(t)` is the population size at time `t`.
- `K` is the carrying capacity.
- `r` is the intrinsic growth rate.
- $N_0$ is the initial population size at time `t=0`.

## Exercise 1 (2/2)

We define the following __objective__ function, $y_i$ being the __observed data__ and $f(x_i, \beta)$ the __model predictions__ given a set of parameters $\beta$:

$$
S(\beta) = \sum_{i=1}^{n} (y_i - f(x_i, \beta))^2.
$$
We want to minimize this (\hat{\beta} represents the best __parameters estimate__):

$$
\hat{\beta} = \arg \min_{\beta} S(\beta) =\arg \min_{\beta} \sum_{i=1}^{n} (y_i - f(x_i, \beta))^2.
$$

Browse to <TBD> and complete all the exercise 1 tasks.

## Homework: going further

You can apply the same principle to the following article: https://www.jstatsoft.org/v66/i05/ about doing non linear regression with `nlstools`.

## Discover shiny components

https://shiny.posit.co/r/components/

![](../../assets/images/1_shiny/components.svg){width="50%" fig-align="center"}

## Improve your application layout

https://shiny.posit.co/r/layouts/

![](../../assets/images/1_shiny/layout.svg){width="50%" fig-align="center"}

## Exercise 2: k-means clustering on the palmerpenguins dataset

Browse to <TBD> and complete all the exercise 2 tasks.

```{r}
x_var <- "bill_length_mm"
y_var <- "bill_depth_mm"
num_clusters <- 3

# Clean data by removing NA values
penguins_clean <- penguins %>%
  drop_na(!!sym(x_var), !!sym(y_var))

# Perform k-means clustering
data_for_clustering <- penguins_clean %>%
  select(!!sym(x_var), !!sym(y_var))

kmeans_model <- kmeans(data_for_clustering, centers = num_clusters)

# Add clusters to dataset
clustered_data <- penguins_clean %>%
  mutate(cluster = as.factor(kmeans_model$cluster))

# Create scatter plot with clusters
ggplot(clustered_data, aes(x = !!sym(x_var), y = !!sym(y_var))) +
  geom_point(
    aes(color = cluster, shape = species),
    size = 3,
    alpha = 0.8
  ) +
  geom_point(
    data = as.data.frame(kmeans_model$centers),
    aes(x = !!sym(x_var), y = !!sym(y_var)),
    color = "black",
    size = 5,
    shape = 8
  ) +
  theme_minimal(base_size = 14) +
  labs(
    title = "K-means Clustering Results",
    x = gsub("_", " ", toupper(x_var)),
    y = gsub("_", " ", toupper(y_var)),
    color = "Cluster"
  ) +
  theme(legend.position = "right") +
  labs(shape = "Species")
```

## Congratulations

![](../../assets/images/1_shiny/congrats.svg){width="50%" fig-align="center"}

## What's next

Towards more __maintainable__ Shiny applications:

- Improve user feedback: https://mastering-shiny.org/action-feedback.html.
- Leverage Shiny modules: https://mastering-shiny.org/scaling-modules.html
- Testing and performances: https://mastering-shiny.org/scaling-testing.html, https://mastering-shiny.org/performance.html